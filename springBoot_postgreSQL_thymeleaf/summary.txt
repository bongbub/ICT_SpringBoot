
SpringBoot + PostgreSQL + thymeleaf + JPA 방식
# mybatis 대신 JPA

Dependency 추가
1.Spring Boot DevTools
2.Lombok
3.Spring Data JPA
4.PostgreSQL Driver
5.Thymeleaf
6.Spring Web

----------------------------------------------

[application.properties]

spring.application.name=springBoot_postgreSQL_thymeleaf

# db connection(postgreSQL) - spring(context.xml)
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5432:postgres
spring.datasource.username=postgres
spring.datasource.password=postgre

# http port number(default 8080)
server.port=8081

# JPA SQL SHOW
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true


---------------------------------------------------------


CREATE TABLE product_tbl(
	id SERIAL PRIMARY KEY,
	name varchar(50) NOT NULL,
	brand varchar(50) NOT NULL,
	madein varchar(50),
	price INTEGER
);

SELECT * FROM MVC_PRODUCT_TBL
 ORDER BY id ASC;

insert into product_tbl(name, brand, madein, price)
values('베지밀고단백검은콩두유', '정식품', '한국', 1500)
insert into product_tbl(name, brand, madein, price)
values('아침햇살', '웅진', '한국', 2100)


------------------------------------------
package com.boot.postgresql.dto;


import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.ToString;

// JSP가 추가되어야 @Entity, @Table import가 가능하다
// javax.persistence <-- 사용\

// 롬복 추가된 DTO


@Data					// getter setter 생략 가능 (lombok)
@AllArgsConstructor		// 매개변수 생성자 대체
@NoArgsConstructor		// 디폴트 생성자 대신
@ToString				// ToString() 대신 사용
@Builder				// 매개변수 생성자에, 순서를 맞춰서 넣어주지 않아도 마지막에 build()를 작동. 즉 같은 타입의 다른 변수의 값을 서로 바꿔넣는 것을 방지한다.
@Entity					// ROM(table의 컬럼과 Object 의 멤버변수를 매핑)
@Table(name="mvc_product_tbl")
public class ProductDTO {
	
	// PK(id) 를 AUTO_INCREMENT 즉, postgreSQL에서 SERIAL로 생성한 경우이며, 생략시 키 중복 오류 발생
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Id               // pk
	private int id;
	private String name;
	private String brand;
	private String madein;
	private int price;
	
}





